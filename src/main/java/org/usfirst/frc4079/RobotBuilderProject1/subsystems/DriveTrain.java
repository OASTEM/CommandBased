// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.RobotBuilderProject1.subsystems;

import org.usfirst.frc4079.RobotBuilderProject1.Constants;
import org.usfirst.frc4079.RobotBuilderProject1.RobotMap;
import org.usfirst.frc4079.RobotBuilderProject1.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.SPI.Port;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final TalonSRX leftMaster = RobotMap.driveTrainLeftMaster;
    private final TalonSRX leftSlave = RobotMap.driveTrainLeftSlave;
    private final TalonSRX rightMaster = RobotMap.driveTrainRightMaster;
    private final TalonSRX rightSlave = RobotMap.driveTrainRightSlave;
    private final AHRS navX1 = RobotMap.driveTrainNavX1;
    public DriveTrain() {
    	
        FeedbackDevice encoder = FeedbackDevice.QuadEncoder;
		
		rightMaster.configSelectedFeedbackSensor(encoder, 0, 10); //timeout is 10 msec
		leftMaster.configSelectedFeedbackSensor(encoder, 0, 10); 
		
		if (rightSlave != null)
			rightSlave.set(ControlMode.Follower, rightMaster.getDeviceID());
		if (leftSlave != null) 
			leftSlave.set(ControlMode.Follower, leftMaster.getDeviceID());
		
		
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new GamepadDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drivePercentOutput(double left, double right) {
    	ControlMode mode = ControlMode.PercentOutput;
    	leftMaster.set(mode, left);
    	rightMaster.set(mode, right);
    }
    
    public void driveToTarget (double left_inches, double right_inches) {
    	ControlMode mode = ControlMode.MotionMagic;
    	double left_target = getNativeUnitsFromInches(left_inches);
        double right_target = getNativeUnitsFromInches(right_inches);
        
        leftMaster.set(mode, left_target);
        rightMaster.set(mode, right_target);
    }
    
    public void turnByAngle (double angle) {
    	ControlMode mode = ControlMode.MotionMagic;
        double delta_distance = getNativeUnitsFromInches(angle/180*Math.PI*Constants.kTrackWidthInches/2);
        double left_position = leftMaster.getSelectedSensorPosition(0);
        double right_position = rightMaster.getSelectedSensorPosition(0);
        leftMaster.set(mode, left_position+delta_distance);
        rightMaster.set(mode, right_position+delta_distance);
    }
    
    public void turnToAngle (double angle) {
    	double current_angle = navX1.getAngle();
    	double delta_angle = angle-current_angle;
    	turnByAngle(delta_angle);
    }
    private double getNativeUnitsFromInches (double inches) {
    	return inches*Constants.kSensorUnitsPerRotation*Constants.kGearRatio/Constants.kDriveWheelDiameterInches/Math.PI;
    }
    
    private double getInchesFromNativeUnits (double native_units) {
    	return native_units/Constants.kSensorUnitsPerRotation/Constants.kGearRatio*Constants.kDriveWheelDiameterInches*Math.PI;
    }
    
    public void stop() {
    	drivePercentOutput(0.0,0.0);
    }

    public synchronized void resetEncoders() {
    	leftMaster.getSensorCollection().setQuadraturePosition(0, 10);
    	leftMaster.setSelectedSensorPosition(0, 0, 10);
    	rightMaster.getSensorCollection().setQuadraturePosition(0, 10);
    	rightMaster.setSelectedSensorPosition(0, 0, 10);
    	leftSlave.setSelectedSensorPosition(0, 0, 10);
    	rightSlave.setSelectedSensorPosition(0, 0, 10);
    	navX1.reset();
    	
    }
	
	public synchronized void initTalons(){
		leftMaster.configClosedloopRamp(Constants.kClosedLoopRampRate, Constants.kTimeoutMs);
		leftMaster.configOpenloopRamp(Constants.kOpenLoopRampRate, Constants.kTimeoutMs);
		rightMaster.configClosedloopRamp(Constants.kClosedLoopRampRate, Constants.kTimeoutMs);
		rightMaster.configOpenloopRamp(Constants.kOpenLoopRampRate, Constants.kTimeoutMs);
		leftSlave.configClosedloopRamp(Constants.kClosedLoopRampRate, Constants.kTimeoutMs);
		leftSlave.configOpenloopRamp(Constants.kOpenLoopRampRate, Constants.kTimeoutMs);
		rightSlave.configClosedloopRamp(Constants.kClosedLoopRampRate, Constants.kTimeoutMs);
		rightSlave.configOpenloopRamp(Constants.kOpenLoopRampRate, Constants.kTimeoutMs);

	}
    public double getLeftDistance() {
    	return getInchesFromNativeUnits(leftMaster.getSelectedSensorPosition(0));
    }
    
    public double getRightDistance() {
    	return getInchesFromNativeUnits(rightMaster.getSelectedSensorPosition(0));
    }
    
    public double getAngle() {
    	return navX1.getAngle(); // in 
    }
    
    public void configureForDrive() {
		rightMaster.config_kP(0, Constants.kDriveStraightKp, Constants.kTimeoutMs);
		rightMaster.config_kI(0, Constants.kDriveStraightKi, Constants.kTimeoutMs);
		rightMaster.config_kD(0, Constants.kDriveStraightKd, Constants.kTimeoutMs);
		rightMaster.config_kF(0, Constants.kDriveStraightKf, Constants.kTimeoutMs);
		rightMaster.config_IntegralZone(0, Constants.kDriveStraightIZone, Constants.kTimeoutMs);
		
		rightMaster.setIntegralAccumulator(0, 0, Constants.kTimeoutMs);
		
		rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, Constants.kStatus_13_TimeMs, Constants.kTimeoutMs);
		rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, Constants.kStatus_10_TimeMs, Constants.kTimeoutMs);
		
		rightMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
		rightMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
		rightMaster.configPeakOutputForward(Constants.kDriveStraightPeakOutput, Constants.kTimeoutMs);
		rightMaster.configPeakOutputReverse(-Constants.kDriveStraightPeakOutput, Constants.kTimeoutMs);
		
		rightMaster.configMotionCruiseVelocity(Constants.kDriveStraightCruiseVelocity, Constants.kTimeoutMs);
		rightMaster.configMotionAcceleration(Constants.kDriveStraightAcceleration, Constants.kTimeoutMs);
		
		leftMaster.config_kP(0, Constants.kDriveStraightKp, Constants.kTimeoutMs);
		leftMaster.config_kI(0, Constants.kDriveStraightKi, Constants.kTimeoutMs);
		leftMaster.config_kD(0, Constants.kDriveStraightKd, Constants.kTimeoutMs);
		leftMaster.config_kF(0, Constants.kDriveStraightKf, Constants.kTimeoutMs);
		leftMaster.config_IntegralZone(0, Constants.kDriveStraightIZone, Constants.kTimeoutMs);
		
		leftMaster.setIntegralAccumulator(0, 0, Constants.kTimeoutMs);

		leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, Constants.kStatus_13_TimeMs, Constants.kTimeoutMs);
		leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, Constants.kStatus_10_TimeMs, Constants.kTimeoutMs);
		
		leftMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
		leftMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
		leftMaster.configPeakOutputForward(Constants.kDriveStraightPeakOutput, Constants.kTimeoutMs);
		leftMaster.configPeakOutputReverse(-Constants.kDriveStraightPeakOutput, Constants.kTimeoutMs);
    	
		leftMaster.configMotionCruiseVelocity(Constants.kDriveStraightCruiseVelocity, Constants.kTimeoutMs);
		leftMaster.configMotionAcceleration(Constants.kDriveStraightAcceleration, Constants.kTimeoutMs);

    }
    public void configureForTurn() {
 		rightMaster.config_kP(0, Constants.kDriveTurnKp, Constants.kTimeoutMs);
 		rightMaster.config_kI(0, Constants.kDriveTurnKi, Constants.kTimeoutMs);
 		rightMaster.config_kD(0, Constants.kDriveTurnKd, Constants.kTimeoutMs);
 		rightMaster.config_kF(0, Constants.kDriveTurnKf, Constants.kTimeoutMs);
 		rightMaster.config_IntegralZone(0, Constants.kDriveTurnIZone, Constants.kTimeoutMs);
 		
 		rightMaster.setIntegralAccumulator(0, 0, Constants.kTimeoutMs);
 		
		rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, Constants.kStatus_13_TimeMs, Constants.kTimeoutMs);
		rightMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, Constants.kStatus_10_TimeMs, Constants.kTimeoutMs);

 		rightMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
		rightMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
		rightMaster.configPeakOutputForward(Constants.kDriveTurnPeakOutput, Constants.kTimeoutMs);
		rightMaster.configPeakOutputReverse(-Constants.kDriveTurnPeakOutput, Constants.kTimeoutMs);
		rightMaster.configMotionCruiseVelocity(Constants.kDriveTurnCruiseVelocity, Constants.kTimeoutMs);
		rightMaster.configMotionAcceleration(Constants.kDriveTurnAcceleration, Constants.kTimeoutMs);
		
 		leftMaster.config_kP(0, Constants.kDriveTurnKp, Constants.kTimeoutMs);
 		leftMaster.config_kI(0, Constants.kDriveTurnKi, Constants.kTimeoutMs);
 		leftMaster.config_kD(0, Constants.kDriveTurnKd, Constants.kTimeoutMs);
 		leftMaster.config_kF(0, Constants.kDriveTurnKf, Constants.kTimeoutMs);
 		leftMaster.config_IntegralZone(0, Constants.kDriveTurnIZone, Constants.kTimeoutMs);
     	
 		leftMaster.setIntegralAccumulator(0, 0, Constants.kTimeoutMs);
 
		leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, Constants.kStatus_13_TimeMs, Constants.kTimeoutMs);
		leftMaster.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, Constants.kStatus_10_TimeMs, Constants.kTimeoutMs);

 		leftMaster.configNominalOutputForward(0, Constants.kTimeoutMs);
		leftMaster.configNominalOutputReverse(0, Constants.kTimeoutMs);
		leftMaster.configPeakOutputForward(Constants.kDriveTurnPeakOutput, Constants.kTimeoutMs);
		leftMaster.configPeakOutputReverse(-Constants.kDriveTurnPeakOutput, Constants.kTimeoutMs);
	
		leftMaster.configMotionCruiseVelocity(Constants.kDriveTurnCruiseVelocity, Constants.kTimeoutMs);
		leftMaster.configMotionAcceleration(Constants.kDriveTurnAcceleration, Constants.kTimeoutMs);

     }
    public void outputToSmartDashboard() {
    	SmartDashboard.putNumber("left position", getLeftDistance());
    	SmartDashboard.putNumber("right position", getRightDistance());
    	SmartDashboard.putNumber("gyro angle", getAngle());
    	SmartDashboard.putNumber("Left CL Error", leftMaster.getClosedLoopError(0));
    	SmartDashboard.putNumber("Right CL Error", rightMaster.getClosedLoopError(0));
    }
}

