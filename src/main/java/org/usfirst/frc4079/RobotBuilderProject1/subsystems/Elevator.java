// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.RobotBuilderProject1.subsystems;

import org.usfirst.frc4079.RobotBuilderProject1.RobotMap;
import org.usfirst.frc4079.RobotBuilderProject1.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   // private final WPI_TalonSRX motor = RobotMap.elevatorMotor;
    private final DigitalInput limitSwitchUp = RobotMap.elevatorLimitSwitchUp;
    private final DigitalInput limitSwitchDown = RobotMap.elevatorLimitSwitchDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Talon motor = RobotMap.elevatorMotor;
    private final Encoder encoder = RobotMap.elevatorEncoder;
    private PIDController controller;

    public Elevator(){
        controller = new PIDController(0.01, 0, 0, encoder, motor);
        controller.setPercentTolerance(10);
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new GamepadRunElevator());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
       // System.out.println(RobotMap.elevatorEncoder.getDistance());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void run(double speed) {
    	motor.set(speed);
    }
    
    public void stop() {
    	motor.set(0);
    }

    public void raiseToHeight(double height){
        controller.setSetpoint(height);
       // motor.pidWrite(controller.get());
    }
    public synchronized void enableController() {
        controller.enable();
    }
    public synchronized void disableController() {
        controller.disable();;
    }
   
}

