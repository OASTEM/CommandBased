// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.RobotBuilderProject1;

import org.usfirst.frc4079.RobotBuilderProject1.commands.*;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public LogitechGamingPad gamePad;
    public JoystickButton buttonA;
    public JoystickButton buttonB;
    public JoystickButton buttonX;
    public JoystickButton buttonY;
    public JoystickButton leftBumper;
    public JoystickButton rightBumper;
    

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS




        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("GamepadDrive", new GamepadDrive());
        SmartDashboard.putData("DriveDistance", new DriveDistance(60,2));
        SmartDashboard.putData("TurnByAngle", new TurnByAngle(90,2));
        SmartDashboard.putData("CommandGroupTest", new CommandGroupTest());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gamePad = new LogitechGamingPad(0);
        
        buttonA = new JoystickButton(gamePad,1);
        buttonA.whenPressed(new TurnByAngle(90,3));
        
        buttonB = new JoystickButton(gamePad,2);
        buttonB.whenPressed(new RaiseElevator(0.8,4));
        
        buttonX = new JoystickButton(gamePad,3);
        buttonX.whenPressed(new RaiseWrist(0.4,1));
        
        buttonY = new JoystickButton(gamePad,4);
        buttonY.whenPressed(new DriveDistance(100,4.5));
        
        leftBumper = new JoystickButton(gamePad,5);
        leftBumper.whenPressed(new EjectCube(0.3,0.5));
        
        rightBumper = new JoystickButton(gamePad,6);
        rightBumper.whenPressed(new GetCube(0.4,1));
        
        
        	
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public LogitechGamingPad getGamePad() {
        return gamePad;
    }
}

