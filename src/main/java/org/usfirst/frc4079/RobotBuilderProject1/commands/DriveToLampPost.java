// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.RobotBuilderProject1.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc4079.RobotBuilderProject1.subsystems.*;
import org.usfirst.frc4079.RobotBuilderProject1.Constants;
import org.usfirst.frc4079.RobotBuilderProject1.motion.*;

/**
 *
 */
public class DriveToLampPost extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public DriveToLampPost() {
    	double leftPoints[][] = new double[Left.kNumPoints][3];
    	double rightPoints[][] = new double[Right.kNumPoints][3];
    
    	
    	// Convert from ft/sec to native units
		for (int i = 0; i < Left.kNumPoints; ++i) {
			leftPoints[i][0] = getNativeUnitsFromInches(12*Left.Points[i][0]); // ft to NU
			leftPoints[i][1] = getNativeUnitsFromInches(12*Left.Points[i][1]/10); // ft/sec to NU/100 msec
			leftPoints[i][2] = Left.Points[i][2];
			rightPoints[i][0] = getNativeUnitsFromInches(-12*Right.Points[i][0]); // ft to NU
			rightPoints[i][1] = getNativeUnitsFromInches(-12*Right.Points[i][1]/10); // ft/sec to NU/100 msec
			rightPoints[i][2] = Right.Points[i][2];
		}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
       addSequential(new DriveProfile(leftPoints, rightPoints, 5));
 
    } 
    private double getNativeUnitsFromInches (double inches) {
    	return inches*Constants.kSensorUnitsPerRotation*Constants.kGearRatio/Constants.kDriveWheelDiameterInches/Math.PI;
    }
}
