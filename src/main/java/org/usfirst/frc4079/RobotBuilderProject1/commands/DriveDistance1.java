// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.RobotBuilderProject1.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4079.RobotBuilderProject1.Robot;

/**
 *
 */
public class DriveDistance1 extends Command {
      private double distance;
      private double leftPosition, rightPosition;
      private double averageDistance;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveDistance1(double distance, double duration) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.distance=distance;
        setTimeout(duration);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	leftPosition=Robot.driveTrain.getLeftDistance();
    	rightPosition=Robot.driveTrain.getRightDistance();
      Robot.driveTrain.configureForDrive();
      
      averageDistance = findAverageDistance();
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	Robot.driveTrain.driveToTarget(leftPosition+distance, rightPosition-distance);
    	//Robot.driveTrain.drivePercentOutput(0.4, -0.4);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {

      if( (Robot.driveTrain.getLeftDistance() >= averageDistance) || 
          (Robot.driveTrain.getRightDistance() >= averageDistance) ) {
            return true;
          }

      return false;
      
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }

    protected double findAverageDistance() {
      double[] sample = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
      double sum = 0;

      for(int i = 0; i < sample.length; i++) {
          sum += sample[i];
      }

      return sum/10;
    }

}
